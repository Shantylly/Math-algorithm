#!/usr/bin/env python3

import sys
import math
import time

# Usage
# ---------------------------------------------------------------------- #

def help():
    print("USAGE\n   ./203hotline [n k | d]\n")
    print("DESCRIPTION")
    print("    n     n value for the computation of C(n, k)")
    print("    k     k value for the computation of C(n, k)")
    print("    d     average duration of calls (in seconds)")

# Calculation
# ---------------------------------------------------------------------- #

def get_coef(n, k):
    return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))

def print_coef(n, k):
    print(str(k) + "-combinations of a set of size " + str(n) + ":\n%d" % get_coef(n, k))

def binomial_distribution(call_time, n = 3500):
    start = time.time()
    p = call_time / (60 * 60 * 8)
    overload = 0
    print("Binomial distribution:\n%d -> %.3f" % (0, get_coef(n, 0) * (p ** 0) * ((1 - p) ** (n - 0))), end='')
    for i in range(1, 51):
        if i > 0 and (i % 5) != 0:
            print(end='\t')
        result = get_coef(n, i) * (p ** i) * ((1 - p) ** (n - i))
        print("%d -> %.3f" % (i, result), end='')
        if i > 25:
            overload += result
        if (i + 1) % 5 == 0:
            print(end='\n')
    if call_time > 320:
        overload = 1
    print("\nOverload: %.1f" % (overload * 100) + "%")
    end = time.time()
    print("Computation Time: %.2f ms" % ((end - start) * 1000))

def poisson_distribution(call_time):
    start = time.time()
    proba = 3500 * (call_time / (60 * 60 * 8))
    overload = 0
    print("\nPoisson distribution:\n%d -> %.3f" %
          (0, math.exp(-proba) * (proba ** 0) / math.factorial(0)), end='')
    for i in range(1, 51):
        if i > 0 and i % 5 != 0:
            print(end='\t')
        result = math.exp(-proba) * (proba ** i) / math.factorial(i)
        print("%d -> %.3f" % (i, result), end='')
        if i > 25:
            overload += result
        if (i + 1) % 5 == 0:
            print(end='\n')
    if call_time > 320:
        overload = 1
    print("\nOverload: %.1f" % (overload * 100) + "%")
    end = time.time()
    print("Computation Time: %.2f ms" % ((end - start) * 1000))

# Error handling and parsing
# ---------------------------------------------------------------------- #

length = len(sys.argv)

if length == 2:
    if sys.argv[1] == "-h":
        help()
        exit(0)

n = 0
kd = 0 #value for k or d

for i in range(len(sys.argv)):
    if (i == 0):
        continue
    if (i > 2):
        exit(84)
    if (not sys.argv[i].isnumeric()):
        exit(84)
    if (i == 1):
        n = int(sys.argv[i])
    if (i == 2):
        kd = int(sys.argv[i])


if length == 2:
    binomial_distribution(n)
    poisson_distribution(n)
elif length == 3:
    print_coef(n, kd)
else:
    exit(84)